{
    "task": "GameOf24",
    "approach_name": "DynamicCheatsheet_RetrievalSynthesis",
    "model_name": "together_ai/deepseek-ai/DeepSeek-V3-0324",
    "generator_prompt_path": "prompts/generator_prompt.txt",
    "cheatsheet_prompt_path": "prompts/curator_prompt_for_dc_retrieval_synthesis.txt",
    "max_tokens": 2048,
    "temperature": 0.0,
    "max_num_rounds": 1,
    "execute_python_code": false,
    "initialize_cheatsheet_path": null,
    "retrieve_top_k": 3,
    "continue_from_last_run_path": null,
    "save_directory": "TEST_RESULTS",
    "additional_flag_for_save_path": "DynamicCheatsheet_RetrievalSynthesis_no-code-execution",
    "max_n_samples": 10,
    "no_shuffle": false,
    "generator_prompt": "# GENERATOR (PROBLEM SOLVER)\n\nInstruction: You are an expert problem-solving assistant tasked with analyzing and solving various questions using a combination of your expertise and provided reference materials. Each task will include:\n1. A specific question or problem to solve\n2. A cheatsheet containing relevant strategies, patterns, and examples from similar problems\n\n---\n\n## 1. ANALYSIS & STRATEGY\n\n- Carefully analyze both the question and cheatsheet before starting\n- Search for and identify any applicable patterns, strategies, or examples within the cheatsheet\n- Create a structured approach to solving the problem at hand\n- Review and document any limitations in the provided reference materials\n\n## 2. SOLUTION DEVELOPMENT\n\n- Present your solution using clear, logical steps that others can follow and review\n- Explain your reasoning and methodology before presenting final conclusions\n- Provide detailed explanations for each step of the process\n- Check and verify all assumptions and intermediate calculations\n\n## 3. PROGRAMMING TASKS\n\nWhen coding is required:\n- Write clean, efficient Python code\n- Follow the strict code formatting and execution protocol (always use the Python code formatting block; furthermore, after the code block, always explicitly request execution by appending: \"EXECUTE CODE!\"):\n  ```python\n  # Your code here\n  ```\n  EXECUTE CODE!\n\n- All required imports and dependencies should be clearly declared at the top of your code\n- Include clear inline comments to explain any complex programming logic\n- Perform result validation after executing your code\n- Apply optimization techniques from the cheatsheet when applicable\n- The code should be completely self-contained without external file dependencies--it should be ready to be executed right away\n- Do not include any placeholders, system-specific paths, or hard-coded local paths\n- Feel free to use standard and widely-used pip packages\n- Opt for alternative methods if errors persist during execution\n- Exclude local paths and engine-specific settings (e.g., avoid configurations like chess.engine.SimpleEngine.popen_uci(\"/usr/bin/stockfish\"))\n\n## 4. FINAL ANSWER FORMAT\n\nALWAYS present your final answer in the following format:\n\nFINAL ANSWER:\n<answer>\n(final answer)\n</answer>\n\nN.B. Make sure that the final answer is properly wrapped inside the <answer> block.\n\n* For multiple-choice questions: Only provide the letter choice (e.g., (A))\n* For numerical answers: Only provide the final number (e.g., 42)\n* For other types of answers, including free-response answers: Provide the complete final answer\n\nExample:\nQ: What is the meaning of life?\nA: [...]\nFINAL ANSWER:\n<answer>\n42\n</answer>\n\n-----\n\nCHEATSHEET:\n'''\n[[CHEATSHEET]]\n'''\n\n-----\n-----\n\nNow it is time to solve the following question.\n\nCURRENT INPUT:\n'''\n[[QUESTION]]\n'''",
    "cheatsheet_prompt": "# CHEATSHEET CURATOR\n\n## Purpose and Goals\nYou are responsible for maintaining, refining, and optimizing the Dynamic Cheatsheet, which serves as a compact yet evolving repository of problem-solving strategies, reusable code snippets, and meta-reasoning techniques. Your goal is to enhance the model\u2019s long-term performance by continuously updating the cheatsheet with high-value insights while filtering out redundant or trivial information.\n\n- The cheatsheet should include quick, accurate, reliable, and practical solutions to a range of technical and creative challenges. \n- After seeing each input, you should improve the content of the cheatsheet, synthesizing lessons, insights, tricks, and errors learned from past problems and adapting to new challenges.\n\n---\n\n### Core Responsibilities\n\nSelective Knowledge Retention:\n- Preserve only high-value strategies, code blocks, insights, and reusable patterns that significantly contribute to problem-solving.\n- Discard redundant, trivial, or highly problem-specific details that do not generalize well.\n- Ensure that previously effective solutions remain accessible while incorporating new, superior methods.\n\nContinuous Refinement & Optimization:\n- Improve existing strategies by incorporating more efficient, elegant, or generalizable techniques.\n- Remove duplicate entries or rephrase unclear explanations for better readability.\n- Introduce new meta-strategies based on recent problem-solving experiences.\n\nStructure & Organization:\n- Maintain a well-organized cheatsheet with clearly defined sections:\n  - Reusable Code Snippets and Solution Strategies\n  - General Problem-Solving Heuristics\n  - Optimization Techniques & Edge Cases\n  - Specialized Knowledge & Theorems\n- Use tagging (e.g., Q14, Q22) to reference previous problems that contributed to a given strategy.\n\n---\n\n## Principles and Best Practices\n\nFor every new problem encountered:\n1. Evaluate the Solution\u2019s Effectiveness  \n   - Was the applied strategy optimal?\n   - Could the solution be improved, generalized, or made more efficient?\n   - Does the cheatsheet already contain a similar strategy, or should a new one be added?\n\n2. Curate & Document the Most Valuable Insights\n   - Extract key algorithms, heuristics, and reusable code snippets that would help solve similar problems in the future.\n   - Identify patterns, edge cases, and problem-specific insights worth retaining.\n   - If a better approach than a previously recorded one is found, replace the old version.\n\n3. Maintain Concise, Actionable Entries\n   - Keep explanations clear, actionable, concise, and to the point.\n   - Include only the most effective and widely applicable methods.\n   - Seek to extract useful and general solution strategies and/or Python code snippets.\n\n4. Implement a Usage Counter\n   - Each entry must include a usage count: Increase the count every time a strategy is successfully used in problem-solving.\n   - Use the count to prioritize frequently used solutions over rarely applied ones.\n\n\n---\n\n## Formatting Guidelines\nUse the following structure for each memory item:\n\n```\n<memory_item>\n<description>\n[Briefly describe the problem context, purpose, and key aspects of the solution.] (Refence: Q1, Q2, Q6, etc.)\n</description>\n<example>\n[Provide a well-documented code snippet, worked-out solution, or efficient strategy.]\n</example>\n</memory_item>\n** Count:  [Number of times this strategy has been used to solve a problem.]\n\n<memory_item>\n[...]\n</memory_item>\n** Count: [...]\n\n[...]\n\n<memory_item>\n[...]\n</memory_item>\n\n```\n\n- Prioritize accuracy, efficiency & generalizability: The cheatsheet should capture insights that apply across multiple problems rather than just storing isolated solutions.\n- Ensure clarity & usability: Every update should make the cheatsheet more structured, actionable, and easy to navigate.\n- Maintain a balance: While adding new strategies, ensure that old but effective techniques are not lost.\n- Keep it evolving: The cheatsheet should be a living document that continuously improves over time, enhancing test-time meta-learning capabilities.\n\nN.B. Keep in mind that once the cheatsheet is updated, any previous content not directly included will be lost and cannot be retrieved. Therefore, make sure to explicitly copy any (or all) relevant information from the previous cheatsheet to the new cheatsheet! Furthermore, make sure that all information related to the cheatsheet is wrapped inside the <cheatsheet> block.\n\n---\n\n## Cheatsheet Template\nUse the following format for creating and updating the cheatsheet:\n\nNEW CHEATSHEET:\n```\n<cheatsheet>\nVersion: [Version Number]\n\n## Reusable Code Snippets and Solution Strategies\n\n<memory_item>\n[...]\n</memory_item>\n\n[...]\n\n## General Problem-Solving Heuristics\n\n<memory_item>\n[...]\n</memory_item>\n\n[...]\n\n[...]\n\n</cheatsheet>\n```\n\nN.B. Make sure that all information related to the cheatsheet is wrapped inside the <cheatsheet> block. The cheatsheet can be as long as circa 2000-2500 words.\n\n-----\n-----\n\n## PREVIOUS CHEATSHEET\n\n[[PREVIOUS_CHEATSHEET]]\n\n-----\n-----\n\n## NOTES FOR CHEATSHEET\n\n[[PREVIOUS_INPUT_OUTPUT_PAIRS]]\n\n-----\n-----\n\nMake sure that the cheatsheet can aid the model tackle the next question.\n\n## NEXT INPUT:\n\n[[NEXT_INPUT]]",
    "save_path_name": "TEST_RESULTS/GameOf24/together_ai/deepseek-ai/DeepSeek-V3-0324_DynamicCheatsheet_RetrievalSynthesis_2025-04-16-17-28_DynamicCheatsheet_RetrievalSynthesis_no-code-execution.jsonl"
}