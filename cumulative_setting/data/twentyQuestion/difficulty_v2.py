import numpy as np
import random

# 计算 difficulty 平均
# gpt_result = [0.227670249, 0.258367538, 0.265226007, 0.198919505, 0.214924193, 0.179103494, 0.153517281, 0.134327621, 0.151520644, 0.167915067, 0.180016424, 0.184296573, 0.189808993, 0.201694578, 0.188248273, 0.176482756, 0.166101417, 0.172932718, 0.17967468, 0.183823422]
gpt_result = [0.227670249, 0.289064826, 0.278942946, 0, 0.278942946, 0, 0, 0, 0.289064826, 0.315464877, 0.301029996, 0.231378213, 0.255958025, 0.356207187, 0, 0, 0, 0.289064826, 0.301029996, 0.262649535]

claude_result = [0.289064826, 0, 0.255958025, 0, 0.301029996, 0.239812467, 0.255958025, 0.227670249, 0.270238154, 0.315464877, 0.315464877, 0, 0.278942946, 0.301029996, 0, 0.333333333, 0, 0.255958025, 0.270238154, 0.244650542]
# deepseek_result = [0.301029996, 0.301029996, 0.200686664, 0.211677633, 0.227155072, 0.229264638, 0.237807522, 0.240912773, 0.243327969, 0.242132994, 0.250423934, 0.229555272, 0.211897175, 0.196761662, 0.183644218, 0.189600388, 0.178447424, 0.183125319, 0.173487145, 0.177312787]
deepseek_result = [0.301029996, 0.301029996, 0, 0.244650542, 0.289064826, 0.239812467, 0.289064826, 0.262649535, 0.262649535, 0.231378213, 0.333333333, 0, 0, 0, 0, 0.278942946, 0, 0.262649535, 0, 0.25]

difficulty = [(g + c + d)/3 for g, c, d in zip(gpt_result, claude_result, deepseek_result)]

def score(perm1, perm2, start, end):
    # sums = [difficulty[i] + difficulty[perm1[i-start]] + difficulty[perm2[i-start]] for i in range(start, end)]
    # sums = [deepseek_result[i-start] + deepseek_result[perm1[i-start]] + deepseek_result[perm2[i-start]] for i in range(start, end)]
    sums = [gpt_result[i-start] + gpt_result[perm1[i-start]] + gpt_result[perm2[i-start]] for i in range(start, end)]
    return np.std(sums), sums


# best_p1, best_p2 = None, None
# min_std = float('inf')

# list1 = [3, 2, 0, 5, 14]
# list2 = [6, 0, 11, 13, 5]
# remain_list1 = [i for i in range(20) if i not in list1]
# remain_list2 = [i for i in range(20) if i not in list2]
# for _ in range(10000):
#     p1 = random.sample(range(20), 5)
#     p2 = random.sample(range(20), 5)
#     std, _= score(p1, p2, 0, 5)
#     if std < min_std:
#         min_std = std
#         best_p1, best_p2 = p1[:], p2[:]

# print("Best perm1:", best_p1)
# print("Best perm2:", best_p2)
# result, sum = score(best_p1, best_p2, 0,5)
# print("Min std of position-wise difficulty sums:", min_std)
# print(sum)

# # deepseek = [(deepseek_result[i] + deepseek_result[best_p1[i]] + deepseek_result[best_p2[i]])/3 for i in range(5)]
# gpt = [(gpt_result[i] + gpt_result[best_p1[i]] + gpt_result[best_p2[i]])/3 for i in range(5)]
# print(gpt)

# Best perm1: [3, 6, 2, 12, 4]
# Best perm2: [9, 4, 6, 8, 5]
# Min std of position-wise difficulty sums: 0.00921196910605086
# [0.5431351259999999, 0.5680077720000001, 0.557885892, 0.5450228509999999, 0.557885892]
# [0.18104504199999996, 0.18933592400000002, 0.185961964, 0.18167428366666663, 0.185961964]

# Best perm1: [5, 11, 6, 12, 14]
# Best perm2: [9, 7, 12, 2, 19]
# Min std of position-wise difficulty sums: 0.008019546839178509
# [0.5431351259999999, 0.520443039, 0.534900971, 0.534900971, 0.541592481]
# [0.18104504199999996, 0.173481013, 0.17830032366666668, 0.17830032366666668, 0.180530827]

# Best perm1: [8, 5, 3, 0, 11]
# Best perm2: [13, 2, 0, 12, 7]
# Min std of position-wise difficulty sums: 0.007875152345238601
# [0.563679531, 0.540842463, 0.545680538, 0.545680538, 0.5517143609999999]
# [0.187893177, 0.180280821, 0.18189351266666667, 0.18189351266666667, 0.183904787]


# Best perm1: [13, 9, 8, 6, 16]
# Best perm2: [9, 2, 15, 14, 5]
# Min std of position-wise difficulty sums: 0.004215142484122612
# [0.532408209, 0.532408209, 0.541592481, 0.533715368, 0.528877293]
# [0.177469403, 0.177469403, 0.180530827, 0.17790512266666667, 0.176292431]

best_p1, best_p2 = None, None
min_std = float('inf')

list1 = [5, 11, 6, 12, 14]
list2 = [9, 7, 12, 2, 19]
remain_list1 = [i for i in range(20) if i not in list1]
remain_list2 = [i for i in range(20) if i not in list2]
for _ in range(10000):
    p1 = random.sample(remain_list1, 15)
    p2 = random.sample(remain_list2, 15)
    std, _= score(p1, p2, 5, 20)
    if std < min_std:
        min_std = std
        best_p1, best_p2 = p1[:], p2[:]

print("Best perm1:", best_p1)
print("Best perm2:", best_p2)
result, sum = score(best_p1, best_p2, 5, 20)
print("Min std of position-wise difficulty sums:", min_std)
print(sum)

best_p1 = list1 + best_p1
best_p2 = list2 + best_p2

best_p1 = [3, 6, 2, 12, 4, 13, 16, 10, 11, 14, 1, 8, 0, 18, 15, 19, 5, 7, 17, 9]
best_p2  = [9, 4, 6, 8, 5, 7, 0, 14, 13, 10, 11, 19, 18, 3, 12, 16, 17, 2, 15, 1]
gpt = [(gpt_result[i] + gpt_result[best_p1[i]] + gpt_result[best_p2[i]])/3 for i in range(20)]
# claude = [(claude_result[i] + claude_result[best_p1[i]] + claude_result[best_p2[i]])/3 for i in range(0, 15)]
# deepseek = [(deepseek_result[i] + deepseek_result[best_p1[i]] + deepseek_result[best_p2[i]])/3 for i in range(20)]

print(gpt)
# print(claude)
# print(deepseek)

# gpt_result = [20, 10, 11, 21, 11, 21, 21, 21, 10, 8, 9, 19, 14, 6, 21, 21, 21, 10, 9, 13]
# claude_result = [10, 21, 14, 21, 9, 17, 14, 20, 12, 8, 8, 21, 11, 9, 21, 7, 21, 14, 12, 16]
# deepseek_result  = [9, 9, 21, 16, 10, 17, 10, 13, 13, 19, 7, 21, 21, 21, 21, 11, 21, 13, 21, 15]


# Best perm1: [16, 14, 7, 6, 13, 18, 17, 12, 2, 4, 9, 10, 15, 19, 1]
# Best perm2: [3, 8, 4, 14, 15, 10, 16, 5, 1, 11, 18, 19, 17, 9, 6]
# Min std of position-wise difficulty sums: 0.028703003162723523
# [0.545680538, 0.563679531, 0.5517143609999999, 0.533715368, 0.5680077720000001, 0.5731458, 0.5517143609999999, 0.502462002, 0.563679531, 0.520443039, 0.5647115460000001, 0.583333333, 0.541592481, 0.481378213, 0.590094822]
# [0.187893177, 0.180280821, 0.18189351266666667, 0.18189351266666667, 0.183904787, 0.16148766966666667, 0.183904787, 0.271454632, 0.183904787, 0.17010705300000004, 0.222222222, 0.087549845, 0.079937489, 0.10034333200000001, 0.096354942, 0.17010705300000004, 0.19444444433333333, 0.268080672, 0.16045940433333333, 0.2800316073333333]

# Best perm1: [13, 9, 8, 6, 16, 4, 5, 3, 0, 18, 12, 14, 11, 2, 19, 7, 15, 10, 17, 1]
# Best perm2: [9, 2, 15, 14, 5, 12, 13, 4, 11, 7, 10, 0, 8, 1, 17, 18, 3, 16, 19, 6]
# Min std of position-wise difficulty sums: 0.07960393340798115
# [0.590094822, 0.540842463, 0.533715368, 0.545680538, 0.5517143609999999, 0.5731458, 0.590094822, 0.52529907, 0.563679531, 0.7440277479999999, 0.595982868, 0.523593488, 0.333333333, 0.512649535, 0.590094822]
# [0.177469403, 0.177469403, 0.180530827, 0.17790512266666667, 0.176292431, 0.176292431, 0.176292431, 0.26545496766666665, 0.187893177, 0.164675916, 0.222222222, 0.10034333200000001, 0.087549845, 0.10034333200000001, 0.17088317833333333, 0.180530827, 0.17453116266666668, 0.198660956, 0.17088317833333333, 0.2800316073333333]



# Best perm1: [3, 6, 2, 12, 4, 13, 16, 10, 11, 14, 1, 8, 0, 18, 15, 19, 5, 7, 17, 9]
# Best perm2: [9, 7, 12, 2, 19, 7, 0, 14, 13, 10, 11, 19, 18, 3, 12, 16, 17, 2, 15, 1]
# Min std of position-wise difficulty sums: 0.0353013682331165
# [0.583877436, 0.5167350749999999, 0.579972942, 0.5875854, 0.579972942, 0.520443039, 0.5517143609999999, 0.528700245, 0.590094822, 0.5714229019999999, 0.563679531, 0.520443039, 0.534900971, 0.645272013, 0.604529703]
# [0.18104504199999996, 0.18933592400000002, 0.185961964, 0.18167428366666663, 0.185961964, 0.118735729, 0.075890083, 0.10034333200000001, 0.292216742, 0.20549829099999997, 0.27382434499999997, 0.261030858, 0.26155275666666666, 0.219079061, 0.08531934166666666, 0.087549845, 0.096354942, 0.18933592400000002, 0.19669827399999998, 0.28905974599999995]