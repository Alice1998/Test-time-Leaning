import numpy as np
import random

# 计算 difficulty 平均
# gpt_result = [0.227670249, 0.258367538, 0.265226007, 0.198919505, 0.214924193, 0.179103494, 0.153517281, 0.134327621, 0.151520644, 0.167915067, 0.180016424, 0.184296573, 0.189808993, 0.201694578, 0.188248273, 0.176482756, 0.166101417, 0.172932718, 0.17967468, 0.183823422]
gpt_result = [0.227670249, 0.289064826, 0.278942946, 0, 0.278942946, 0, 0, 0, 0.289064826, 0.315464877, 0.301029996, 0.231378213, 0.255958025, 0.356207187, 0, 0, 0, 0.289064826, 0.301029996, 0.262649535]

claude_result = [0.289064826, 0, 0.255958025, 0, 0.301029996, 0.239812467, 0.255958025, 0.227670249, 0.270238154, 0.315464877, 0.315464877, 0, 0.278942946, 0.301029996, 0, 0.333333333, 0, 0.255958025, 0.270238154, 0.244650542]
# deepseek_result = [0.301029996, 0.301029996, 0.200686664, 0.211677633, 0.227155072, 0.229264638, 0.237807522, 0.240912773, 0.243327969, 0.242132994, 0.250423934, 0.229555272, 0.211897175, 0.196761662, 0.183644218, 0.189600388, 0.178447424, 0.183125319, 0.173487145, 0.177312787]
deepseek_result = [0.301029996, 0.301029996, 0, 0.244650542, 0.289064826, 0.239812467, 0.289064826, 0.262649535, 0.262649535, 0.231378213, 0.333333333, 0, 0, 0, 0, 0.278942946, 0, 0.262649535, 0, 0.25]

difficulty = [(g + c + d)/3 for g, c, d in zip(gpt_result, claude_result, deepseek_result)]

def score(perm1, perm2, start, end):
    sums = [difficulty[i] + difficulty[perm1[i-start]] + difficulty[perm2[i-start]] for i in range(start, end)]
    return np.std(sums), sums

# 搜索最佳 perm1, perm2
# best_p1, best_p2 = None, None
# min_std = float('inf')

# list1 = [12, 15, 11, 0, 10]
# list2 = [3, 6, 4, 8, 11]
# remain_list1 = [i for i in range(20) if i not in list1]
# remain_list2 = [i for i in range(20) if i not in list2]
# for _ in range(10000):
#     p1 = random.sample(remain_list1, 15)
#     p2 = random.sample(remain_list2, 15)
#     std, _= score(p1, p2, 5, 20)
#     if std < min_std:
#         min_std = std
#         best_p1, best_p2 = p1[:], p2[:]

# print("Best perm1:", best_p1)
# print("Best perm2:", best_p2)
# result, sum = score(best_p1, best_p2, 5,20)
# print("Min std of position-wise difficulty sums:", min_std)
# print(sum)


# order2 = [16, 0, 13, 6, 14, 11, 4, 1, 12, 2, 5, 19, 17, 9, 15, 18, 10, 3, 8, 7]
# order3 = [13, 11, 5, 9, 19, 2, 6, 4, 1, 16, 7, 8, 14, 3, 15, 17, 12, 0, 18, 10]

# order2 = [12, 2, 3, 18, 16, 11, 15, 8, 9, 6, 17, 10, 14, 1, 0, 19, 5, 7, 13, 4]
# order3 = [14, 19, 9, 8, 6, 2, 1, 17, 16, 11, 7, 0, 12, 15, 10, 3, 13, 5, 4, 18]

# order2 = [3, 4, 8, 9, 10, 17, 18, 2, 16, 7, 14, 5, 11, 12, 0, 13, 15, 6, 1, 19]
# order3 = [5, 3, 16, 8, 14, 13, 4, 11, 0, 17, 12, 2, 10, 1, 19, 7, 15, 18, 9, 6]
# score(order2, order3)

# order2 = [19, 2, 3, 13, 6, 15, 9, 8, 12, 18, 5, 1, 17, 16, 10, 14, 4, 11, 0, 7]
# order3 = [14, 1, 8, 15, 3, 17, 4, 7, 19, 0, 6, 5, 9, 13, 16, 10, 12, 18, 2, 11]
# score(order2, order3)
# Min std of position-wise difficulty sums: 0.005541266456351942
# Best perm1: [16, 0, 13, 6, 14, 11, 4, 1, 12, 2, 5, 19, 17, 9, 15, 18, 10, 3, 8, 7]
# Best perm2: [13, 11, 5, 9, 19, 2, 6, 4, 1, 16, 7, 8, 14, 3, 15, 17, 12, 0, 18, 10]
# Min std of position-wise difficulty sums: 0.036522279576727774

# [0.6206000493333333, 0.5970048166666666, 0.6898458436666667, 0.5944643013333334, 0.5735961676666667, 0.59463438, 0.6792249723333333, 0.635139146, 0.6350444716666667, 0.597310825, 0.6656654923333333, 0.561575121, 0.5548525556666666, 0.6118654373333333, 0.590241815, 0.6449441726666666, 0.59036773, 0.6134594236666666, 0.637295575, 0.6515342096666666]


# Best perm1: [12, 2, 3, 18, 16, 11, 15, 8, 9, 6, 17, 10, 14, 1, 0, 19, 5, 7, 13, 4]
# Best perm2: [14, 19, 9, 8, 6, 2, 1, 17, 16, 11, 7, 0, 12, 15, 10, 3, 13, 5, 4, 18]
# Min std of position-wise difficulty sums: 0.03569928284482688
# [0.6234355586666667, 0.629018327, 0.619326924, 0.5663612946666666, 0.5783136433333333, 0.59463438, 0.635365613, 0.6266711573333332, 0.5783828486666667, 0.5955492036666667, 0.6536106466666666, 0.6591740503333333, 0.5777302396666666, 0.652766749, 0.645187599, 0.5719334553333334, 0.5640718920000001, 0.6210357679999999, 0.6886651586666667, 0.657431997]


# [0.6255142693333333, 0.5710346443333334, 0.5771687679999999, 0.6003989476666667, 0.6203023289999999, 0.6532276323333334, 0.6712640226666666, 0.5795443946666666, 0.6091335596666667, 0.6468132143333333, 0.5994822799999999, 0.59463438, 0.6134687313333334, 0.6465109613333334, 0.5984814376666667, 0.6672711186666667, 0.581127265, 0.6275662896666666, 0.6361034836666667, 0.6196187766666668]
# Best perm1: [3, 4, 8, 9, 10, 17, 18, 2, 16, 7, 14, 5, 11, 12, 0, 13, 15, 6, 1, 19]
# Best perm2: [5, 3, 16, 8, 14, 13, 4, 11, 0, 17, 12, 2, 10, 1, 19, 7, 15, 18, 9, 6]
# Min std of position-wise difficulty sums: 0.029154573415268354


# Best perm1: [19, 2, 3, 13, 6, 15, 9, 8, 12, 18, 5, 1, 17, 16, 10, 14, 4, 11, 0, 7]
# Best perm2: [14, 1, 8, 15, 3, 17, 4, 7, 19, 0, 6, 5, 9, 13, 16, 10, 12, 18, 2, 11]
# Min std of position-wise difficulty sums: 0.005541266456351942

# Best perm1: [6, 18, 17, 9, 11]
# Best perm2: [3, 9, 1, 10, 2]
# Min std of position-wise difficulty sums: 0.003978340340201274


# Best perm1: [12, 15, 11, 0, 10]
# Best perm2: [3, 6, 4, 8, 11]
# Min std of position-wise difficulty sums: 0.0036472452650932095
# [0.6363371076666666, 0.635365613, 0.6262772673333333, 0.6311496586666666, 0.6342887803333332]

# Best perm1: [19, 18, 9, 2, 1, 16, 5, 3, 14, 17, 7, 13, 6, 8, 4]
# Best perm2: [1, 19, 18, 16, 15, 10, 2, 9, 13, 0, 5, 12, 7, 14, 17]
# Min std of position-wise difficulty sums: 0.030985377390617245
# [0.6044549613333334, 0.6254898526666667, 0.6506078533333333, 0.5771687679999999, 0.6614423163333334, 0.6121197703333333, 0.59463438, 0.6055863966666667, 0.5902883210000001, 0.6005578746666667, 0.6501692396666666, 0.5748947303333334, 0.6207365109999999, 0.5534597456666667, 0.653637358]

gpt_result = [20, 10, 11, 21, 11, 21, 21, 21, 10, 8, 9, 19, 14, 6, 21, 21, 21, 10, 9, 13]
claude_result = [10, 21, 14, 21, 9, 17, 14, 20, 12, 8, 8, 21, 11, 9, 21, 7, 21, 14, 12, 16]
deepseek_result  = [9, 9, 21, 16, 10, 17, 10, 13, 13, 19, 7, 21, 21, 21, 21, 11, 21, 13, 21, 15]

# gpt_result = [21-x for x in gpt_result]
# claude_result = [21-x for x in claude_result]
# deepseek_result = [21-x for x in deepseek_result]

order1 = [12, 15, 11, 0, 10, 19, 18, 9, 2, 1, 16, 5, 3, 14, 17, 7, 13, 6, 8, 4]
order2 = [3, 6, 4, 8, 11, 1, 19, 18, 16, 15, 10, 2, 9, 13, 0, 5, 12, 7, 14, 17]

for value in [gpt_result, claude_result, deepseek_result]:
    print(value)
    print([value[i] for i in order1])
    print([value[i] for i in order2])

value = [0.262649535, 0.315464877, 0.315464877, 0.262649535, 0.25, 0.255958025, 0.244650542, 0.301029996, 0.244650542, 0.289064826, 0.333333333, 0.278942946, 0.301029996, 0.262649535, 0, 0.255958025, 0.289064826, 0, 0.270238154, 0]
order1 = [13, 9, 8, 6, 16, 4, 5, 3, 0, 18, 12, 14, 11, 2, 19, 7, 15, 10, 17, 1]
order2 = [9, 2, 15, 14, 5, 12, 13, 4, 11, 7, 10, 0, 8, 1, 17, 18, 3, 16, 19, 6]
print([value[i] for i in order1])
print([value[i] for i in order2])


rank1 = [9, 9, 21, 16, 10, 17, 10, 13, 13, 19, 7, 21, 21, 21, 21, 11, 21, 13, 21, 15]
rank2 = [13, 8, 8, 13, 15, 14, 16, 9, 16, 10, 7, 11, 9, 13, 21, 14, 10, 21, 12, 21]

order_list1 = [12, 15, 11, 0, 10, 19, 18, 9, 2, 1, 16, 5, 3, 14, 17, 7, 13, 6, 8, 4]
order_list2 = [3, 6, 4, 8, 11, 1, 19, 18, 16, 15, 10, 2, 9, 13, 0, 5, 12, 7, 14, 17]

order_deepseek = [13, 9, 8, 6, 16, 4, 5, 3, 0, 18, 12, 14, 11, 2, 19, 7, 15, 10, 17, 1]
order_deepseek_v2 = [9, 2, 15, 14, 5, 12, 13, 4, 11, 7, 10, 0, 8, 1, 17, 18, 3, 16, 19, 6]

print([rank1[i] for i in order_list1])
print([rank1[i] for i in order_list2])

print([rank2[i] for i in order_deepseek])
print([rank2[i] for i in order_deepseek_v2])

print([rank1[i] for i in order_deepseek])
print([rank1[i] for i in order_deepseek_v2])

value = [0.281839765, 0.308247436, 0.269854351, 0.253650039, 0.269532413, 0.247885246, 0.266857684, 0.281839765, 0.253650039, 0.26022152, 0.333333333, 0.251593385, 0.26263691, 0.24344668, 0.224243824, 0.267450485, 0.256654325, 0.24344668, 0.247240989, 0.237121912]
value = [0.262649535, 0.315464877, 0.315464877, 0.262649535, 0.25, 0.255958025, 0.244650542, 0.301029996, 0.244650542, 0.289064826, 0.333333333, 0.278942946, 0.301029996, 0.262649535, 0, 0.255958025, 0.289064826, 0, 0.270238154, 0]
print([value[i] for i in order_deepseek])
print([value[i] for i in order_deepseek_v2])